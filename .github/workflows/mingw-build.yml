name: MinGW Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug

jobs:
  mingw-windows-build:
    name: MinGW Windows Build (${{ matrix.build_type }})
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: >-
          ${{
            github.event_name == 'pull_request' && fromJson('["Release"]') ||
            (github.event_name == 'push' && github.ref == 'refs/heads/master') && fromJson('["Release", "Debug"]') ||
            fromJson(format('["{0}"]', github.event.inputs.build_type || 'Release'))
          }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MinGW-w64 via MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make
            mingw-w64-x86_64-ninja
            make
            git

      - name: Direct CMake Build with MinGW
        shell: msys2 {0}
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          # Set up environment
          export CC=gcc
          export CXX=g++
          export RC=windres

          # Clean previous builds
          rm -rf build-mingw

          # Configure CMake
          mkdir -p build-mingw
          cd build-mingw

          cmake .. \
            -G "MinGW Makefiles" \
            -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_RC_COMPILER=windres \
            -DCMAKE_MAKE_PROGRAM=mingw32-make

          # Build the project
          cmake --build . --parallel $(nproc)

      - name: Package MinGW artifacts
        shell: msys2 {0}
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          # Create build-type specific directory structure
          mkdir -p ${BUILD_TYPE}/lib/mingw64

          # Copy built libraries
          find build-mingw -type f -name "*.a" -exec cp {} ${BUILD_TYPE}/lib/mingw64/ \;

          # List generated files
          echo "Generated MinGW libraries for $BUILD_TYPE:"
          ls -la ${BUILD_TYPE}/lib/mingw64/

      - name: Upload MinGW artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xege-mingw-windows-${{ matrix.build_type }}-libraries
          path: ${{ matrix.build_type }}/lib/mingw64/
          retention-days: 30
        if: success()

  mingw-ubuntu-build:
    name: MinGW Ubuntu Build (${{ matrix.build_type }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: >-
          ${{
            github.event_name == 'pull_request' && fromJson('["Release"]') ||
            (github.event_name == 'push' && github.ref == 'refs/heads/master') && fromJson('["Release", "Debug"]') ||
            fromJson(format('["{0}"]', github.event.inputs.build_type || 'Release'))
          }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install MinGW-w64 cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mingw-w64 \
            mingw-w64-tools \
            gcc-mingw-w64-x86-64 \
            g++-mingw-w64-x86-64 \
            cmake \
            make \
            git

      - name: Cross-compile with MinGW-w64
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          # Clean previous builds
          rm -rf build-mingw-ubuntu

          # Configure CMake for cross-compilation
          mkdir -p build-mingw-ubuntu
          cd build-mingw-ubuntu

          # CMakeLists.txt will automatically detect CMAKE_HOST_UNIX and configure cross-compilation
          cmake .. -DCMAKE_BUILD_TYPE="$BUILD_TYPE"

          # Build the project
          cmake --build . --parallel $(nproc)

      - name: Package MinGW Ubuntu artifacts
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          # Create build-type specific directory structure
          mkdir -p ${BUILD_TYPE}/lib/mingw-w64-ubuntu

          # Copy built libraries
          find build-mingw-ubuntu -type f -name "*.a" -exec cp {} ${BUILD_TYPE}/lib/mingw-w64-ubuntu/ \;

          # List generated files
          echo "Generated MinGW Ubuntu libraries for $BUILD_TYPE:"
          ls -la ${BUILD_TYPE}/lib/mingw-w64-ubuntu/

      - name: Upload MinGW Ubuntu artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xege-mingw-ubuntu-${{ matrix.build_type }}-libraries
          path: ${{ matrix.build_type }}/lib/mingw-w64-ubuntu/
          retention-days: 30
        if: success()
